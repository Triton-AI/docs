"use strict";(self.webpackChunkappcircle_docusaurus=self.webpackChunkappcircle_docusaurus||[]).push([[601],{4017:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"projects/gokart/rtc/firmware","title":"Gokart Controller Documentation","description":"Overview","source":"@site/docs/projects/gokart/rtc/firmware.md","sourceDirName":"projects/gokart/rtc","slug":"/projects/gokart/rtc/firmware","permalink":"/docs/projects/gokart/rtc/firmware","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"mySidebar","previous":{"title":"Holder","permalink":"/docs/projects/gokart/misc/holder"},"next":{"title":"RobotX","permalink":"/docs/projects/robotx/"}}');var i=r(4848),t=r(8453);const o={},l="Gokart Controller Documentation",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Hardware Setup",id:"hardware-setup",level:2},{value:"Board Fuses",id:"board-fuses",level:3},{value:"USB Connection",id:"usb-connection",level:3},{value:"Serial Connection",id:"serial-connection",level:3},{value:"Modules and Components",id:"modules-and-components",level:2},{value:"Main Application",id:"main-application",level:3},{value:"State Machine",id:"state-machine",level:3},{value:"Communication Manager",id:"communication-manager",level:3},{value:"Controller",id:"controller",level:3},{value:"Remote Control (RC) Controller",id:"remote-control-rc-controller",level:3},{value:"Sensor Reader",id:"sensor-reader",level:3},{value:"Actuation Controller &amp; VESC CAN Tools",id:"actuation-controller--vesc-can-tools",level:3},{value:"Logger and Profilers",id:"logger-and-profilers",level:3},{value:"Watchdog &amp; Watchable",id:"watchdog--watchable",level:3},{value:"Development Environment",id:"development-environment",level:2},{value:"Setting Up PlatformIO for Visual Studio Code",id:"setting-up-platformio-for-visual-studio-code",level:3},{value:"Platform Compatibility",id:"platform-compatibility",level:3},{value:"Configuration Files",id:"configuration-files",level:3},{value:"platformio.ini",id:"platformioini",level:4},{value:"mbed_app.json",id:"mbed_appjson",level:3},{value:"Building and Running",id:"building-and-running",level:2},{value:"Testing",id:"testing",level:2},{value:"Serial Control Testing",id:"serial-control-testing",level:3},{value:"Future Work",id:"future-work",level:2},{value:"Critical Issues",id:"critical-issues",level:3},{value:"Vehicle Performance",id:"vehicle-performance",level:3},{value:"Code Structure",id:"code-structure",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"gokart-controller-documentation",children:"Gokart Controller Documentation"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The Triton AI Gokart Controller is an embedded software project built on Mbed OS for controlling a gokart. It supports multiple control modes and integrates various subsystems including communication, sensor reading, state management, actuation via CAN bus, performance profiling, and a watchdog system."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," This project is designed to run on hardware such as the Nucleo-H723ZG and relies on Mbed OS APIs."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#project-structure",children:"Project Structure"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#hardware-setup",children:"Hardware Setup"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#modules-and-components",children:"Modules and Components"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#main-application",children:"Main Application"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#state-machine",children:"State Machine"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#communication-manager",children:"Communication Manager"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#controller",children:"Controller"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#remote-control-rc-controller",children:"Remote Control (RC) Controller"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#sensor-reader",children:"Sensor Reader"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#actuation-controller--vesc-can-tools",children:"Actuation Controller & VESC CAN Tools"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#logger-and-profilers",children:"Logger and Profilers"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#watchdog--watchable",children:"Watchdog & Watchable"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#development-environment",children:"Development Environment"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#building-and-running",children:"Building and Running"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#testing",children:"Testing"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#future-work",children:"Future Work"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,i.jsx)(n.p,{children:"Below is an overview of the key folders and files:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"src\n\u251c\u2500\u2500 Actuation\n\u2502   \u251c\u2500\u2500 actuation_controller.cpp\n\u2502   \u251c\u2500\u2500 actuation_controller.hpp\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2514\u2500\u2500 vesc_can_tools.hpp\n\u251c\u2500\u2500 Comm\n\u2502   \u251c\u2500\u2500 comm.cpp\n\u2502   \u2514\u2500\u2500 comm.hpp\n\u251c\u2500\u2500 Controller\n\u2502   \u251c\u2500\u2500 controller.cpp\n\u2502   \u2514\u2500\u2500 controller.hpp\n\u251c\u2500\u2500 main.cpp\n\u251c\u2500\u2500 RCController\n\u2502   \u251c\u2500\u2500 rc_controller.cpp\n\u2502   \u2514\u2500\u2500 rc_controller.hpp\n\u251c\u2500\u2500 Sensor\n\u2502   \u251c\u2500\u2500 brake_pressure_sensor.cpp\n\u2502   \u251c\u2500\u2500 brake_pressure_sensor.hpp\n\u2502   \u251c\u2500\u2500 sensor_reader.cpp\n\u2502   \u251c\u2500\u2500 sensor_reader.hpp\n\u2502   \u251c\u2500\u2500 wheel_speed_sensor.cpp\n\u2502   \u2514\u2500\u2500 wheel_speed_sensor.hpp\n\u251c\u2500\u2500 StateMachine\n\u2502   \u251c\u2500\u2500 state_machine.cpp\n\u2502   \u2514\u2500\u2500 state_machine.hpp\n\u251c\u2500\u2500 Tools\n\u2502   \u251c\u2500\u2500 global_profilers.hpp\n\u2502   \u251c\u2500\u2500 logger.hpp\n\u2502   \u2514\u2500\u2500 profiler.hpp\n\u251c\u2500\u2500 USBJoystick\n\u2502   \u251c\u2500\u2500 usb_joystick.cpp\n\u2502   \u2514\u2500\u2500 usb_joystick.hpp\n\u2514\u2500\u2500 Watchdog\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 watchable.hpp\n    \u251c\u2500\u2500 watchdog.cpp\n    \u2514\u2500\u2500 watchdog.hpp\n"})}),"\n",(0,i.jsx)(n.p,{children:"Each folder contains code that encapsulates one or more aspects of the system's functionality."}),"\n",(0,i.jsx)(n.h2,{id:"hardware-setup",children:"Hardware Setup"}),"\n",(0,i.jsx)(n.h3,{id:"board-fuses",children:"Board Fuses"}),"\n",(0,i.jsx)(n.p,{children:"The breakout board includes protection fuses that may blow during development or if there's a power issue. If a fuse blows, you can bridge it with solder to restore functionality. There are 3 fuses on the breakout board, located next to the 12v, 5v, and 3.3v inputs. Documentation and schematics for the breakout board are located in this repository."}),"\n",(0,i.jsx)(n.h3,{id:"usb-connection",children:"USB Connection"}),"\n",(0,i.jsxs)(n.p,{children:["The controller requires a USB connection to the on-board computer. ",(0,i.jsx)(n.strong,{children:"Important"}),": The system waits for this connection before fully initializing. Ensure the USB cable is properly connected between the user USB device port on the board and the computer."]}),"\n",(0,i.jsx)(n.h3,{id:"serial-connection",children:"Serial Connection"}),"\n",(0,i.jsxs)(n.p,{children:["For debugging and direct control, connect the Serial-to-USB adapter to the machine you wish to use for testing, not directly to the Nucleo board. This allows communication via ",(0,i.jsx)(n.code,{children:"/dev/ttyUSB0"})," (linux), ",(0,i.jsx)(n.code,{children:"/dev/cu.usbmodemXXXX"})," (MacOS), or similar ports."]}),"\n",(0,i.jsx)(n.h2,{id:"modules-and-components",children:"Modules and Components"}),"\n",(0,i.jsx)(n.h3,{id:"main-application",children:"Main Application"}),"\n",(0,i.jsxs)(n.p,{children:["The entry point is in ",(0,i.jsx)(n.strong,{children:"main.cpp"}),". It:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Sets up the passthrough button (an interrupt on the user button for toggling controller passthrough mode)."}),"\n",(0,i.jsxs)(n.li,{children:["Instantiates the ",(0,i.jsx)(n.code,{children:"Controller"})," object."]}),"\n",(0,i.jsx)(n.li,{children:"Runs an infinite loop with sleep intervals to keep the thread alive."}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example snippet (main.cpp):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include "PinNames.h"\n#include "mbed.h"\n#include "Controller/controller.hpp"\n\nbool g_PassthroughEnabled = false;\n\n// Button callback for toggling passthrough mode\nvoid TogglePassthrough() {\n    g_PassthroughEnabled = !g_PassthroughEnabled;\n}\n\nInterruptIn button(BUTTON1);\n\nint main() {\n    // Use user button to toggle passthrough\n    button.rise(&TogglePassthrough);\n    \n    new tritonai::gkc::Controller();\n    \n    while (true) {\n        ThisThread::sleep_for(3600000ms); // 1 hour\n    };\n}\n'})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"state-machine",children:"State Machine"}),"\n",(0,i.jsxs)(n.p,{children:["The state machine (see ",(0,i.jsx)(n.strong,{children:"state_machine.hpp"})," and ",(0,i.jsx)(n.strong,{children:"state_machine.cpp"}),") defines the lifecycle of the controller. It manages transitions among states such as:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Uninitialized"})," \u2013 the default state."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Initializing"})," \u2013 when the system is starting up."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inactive"})," \u2013 when the system is idle."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Active"})," \u2013 when the gokart is under normal operation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Emergency"})," \u2013 when an error or safety-critical event occurs."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The abstract base class requires child classes (e.g., the Controller class) to implement state-specific callbacks such as ",(0,i.jsx)(n.code,{children:"OnInitialize"}),", ",(0,i.jsx)(n.code,{children:"OnActivate"}),", and ",(0,i.jsx)(n.code,{children:"OnEmergencyStop"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"communication-manager",children:"Communication Manager"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"CommManager"})," (declared in ",(0,i.jsx)(n.strong,{children:"comm.hpp"})," and implemented in ",(0,i.jsx)(n.strong,{children:"comm.cpp"}),") handles packet-based communication. It supports:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Sending and receiving packets over Serial."}),"\n",(0,i.jsx)(n.li,{children:"Converting high-level packets into byte buffers."}),"\n",(0,i.jsx)(n.li,{children:"Calling packet callbacks on the Controller."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"It uses a send queue and dedicated threads to manage communication asynchronously."}),"\n",(0,i.jsx)(n.h3,{id:"controller",children:"Controller"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Controller"})," class (in ",(0,i.jsx)(n.strong,{children:"Controller/controller.hpp"})," and ",(0,i.jsx)(n.strong,{children:"controller.cpp"}),") is the central unit. It inherits from several interfaces:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GkcPacketSubscriber"})," \u2013 to receive packets."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Watchable"})," \u2013 so that it can be monitored by the watchdog."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ILogger"})," \u2013 for logging events."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GkcStateMachine"})," \u2013 to manage its state."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"It integrates the CommManager, SensorReader, ActuationController, RCController, and a local watchdog. The Controller's heartbeat function periodically sends a heartbeat packet and toggles an LED, while also logging state transitions."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key responsibilities include:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Handling various packet types (e.g., handshake, control, sensor, and RC packets)."}),"\n",(0,i.jsxs)(n.li,{children:["Managing state transitions (e.g., from ",(0,i.jsx)(n.em,{children:"Inactive"})," to ",(0,i.jsx)(n.em,{children:"Active"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"Coordinating actuation commands."}),"\n",(0,i.jsx)(n.li,{children:"Responding to safety events (e.g., lost RC heartbeat triggers an emergency stop)."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"remote-control-rc-controller",children:"Remote Control (RC) Controller"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"RCController"})," (in ",(0,i.jsx)(n.strong,{children:"RCController/rc_controller.hpp"})," and ",(0,i.jsx)(n.strong,{children:"rc_controller.cpp"}),") processes remote control inputs. It:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reads analog signals from an ELRS receiver."}),"\n",(0,i.jsxs)(n.li,{children:["Normalizes and maps the signals (using helper functions in a nested ",(0,i.jsx)(n.code,{children:"Translation"})," struct) to throttle, brake, and steering commands."]}),"\n",(0,i.jsx)(n.li,{children:"Publishes RC packets for consumption by the Controller."}),"\n",(0,i.jsx)(n.li,{children:"Monitors heartbeat from the RC to detect disconnections."}),"\n",(0,i.jsx)(n.li,{children:"Provides USB joystick passthrough functionality when enabled."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"sensor-reader",children:"Sensor Reader"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"SensorReader"})," (in ",(0,i.jsx)(n.strong,{children:"Sensor/sensor_reader.hpp"})," and ",(0,i.jsx)(n.strong,{children:"sensor_reader.cpp"}),") is responsible for polling various sensor providers. It:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Maintains a list of sensor provider objects that implement the ",(0,i.jsx)(n.code,{children:"ISensorProvider"})," interface."]}),"\n",(0,i.jsxs)(n.li,{children:["Periodically reads sensor data and populates a ",(0,i.jsx)(n.code,{children:"SensorGkcPacket"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Uses a mutex to safely add or remove sensor providers."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"actuation-controller--vesc-can-tools",children:"Actuation Controller & VESC CAN Tools"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"ActuationController"})," (in ",(0,i.jsx)(n.strong,{children:"Actuation/actuation_controller.hpp"})," and ",(0,i.jsx)(n.strong,{children:"actuation_controller.cpp"}),") commands the vehicle's actuators. It sends commands to the motor controllers and brakes through CAN bus messages."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"VESC CAN Tools"})," (in ",(0,i.jsx)(n.strong,{children:"vesc_can_tools.hpp"}),") provide a set of helper functions to:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Format and send CAN messages."}),"\n",(0,i.jsx)(n.li,{children:"Convert actuation commands (throttle, brake, steering) into the proper CAN message formats."}),"\n",(0,i.jsx)(n.li,{children:"Map steering angles using lookup tables defined in the configuration."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"logger-and-profilers",children:"Logger and Profilers"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Logger:"})," The ",(0,i.jsx)(n.code,{children:"ILogger"})," interface (see ",(0,i.jsx)(n.strong,{children:"Tools/logger.hpp"}),") provides a common API for logging messages with different severity levels. The Controller implements this interface and prints log messages to ",(0,i.jsx)(n.code,{children:"stdout"})," or ",(0,i.jsx)(n.code,{children:"stderr"})," depending on the severity."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Profilers:"})," The profiler classes (in ",(0,i.jsx)(n.strong,{children:"Tools/profiler.hpp"})," and ",(0,i.jsx)(n.strong,{children:"Tools/global_profilers.hpp"}),") offer functionality to measure code performance. They track elapsed and average times for specific sections (e.g., Control, Sensor, Comm) and can dump profiling information as strings."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"watchdog--watchable",children:"Watchdog & Watchable"}),"\n",(0,i.jsx)(n.p,{children:"To ensure system reliability, the project includes a watchdog system:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Watchable:"})," (in ",(0,i.jsx)(n.strong,{children:"Watchdog/watchable.hpp"}),") is an interface for components that should be monitored. It provides methods to increment an activity counter."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Watchdog:"})," (in ",(0,i.jsx)(n.strong,{children:"Watchdog/watchdog.hpp"})," and ",(0,i.jsx)(n.strong,{children:"watchdog.cpp"}),") monitors a list of ",(0,i.jsx)(n.code,{children:"Watchable"})," objects and triggers a system reset if one of them becomes inactive for too long."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This mechanism is used by critical modules such as the Controller, CommManager, SensorReader, and RCController."}),"\n",(0,i.jsx)(n.h2,{id:"development-environment",children:"Development Environment"}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-platformio-for-visual-studio-code",children:"Setting Up PlatformIO for Visual Studio Code"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Install VS Code and PlatformIO:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Download and install ",(0,i.jsx)(n.a,{href:"https://code.visualstudio.com/",children:"VS Code"})]}),"\n",(0,i.jsx)(n.li,{children:"Open VS Code and install the PlatformIO extension from the marketplace"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Open the Project:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"In VS Code, go to PlatformIO Home"}),"\n",(0,i.jsx)(n.li,{children:'Select "Open Project"'}),"\n",(0,i.jsx)(n.li,{children:"Navigate to the gokart controller project folder"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configure PlatformIO:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The project includes a ",(0,i.jsx)(n.code,{children:"platformio.ini"})," file that configures build settings"]}),"\n",(0,i.jsxs)(n.li,{children:["Make sure the correct board is selected (e.g., ",(0,i.jsx)(n.code,{children:"nucleo_h723zg"}),")"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Build and Upload:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use the PlatformIO toolbar to build and upload the project to the Nucleo board"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"platform-compatibility",children:"Platform Compatibility"}),"\n",(0,i.jsx)(n.p,{children:"This project has primarily been tested on Mac and Linux systems. Windows support is experimental:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Windows:"})," Not thoroughly tested. Users have used WSL (Windows Subsystem for Linux) with USB passthrough for development."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mac OS"})," Usable development platform. USB devices will often have different names on each use."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Linux:"})," Recommended development platform. Tested on Ubuntu and similar distributions."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"configuration-files",children:"Configuration Files"}),"\n",(0,i.jsx)(n.h4,{id:"platformioini",children:"platformio.ini"}),"\n",(0,i.jsx)(n.p,{children:"This file controls build instructions and runtime configurations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",children:"[env:nucleo_h723zg]\nplatform = ststm32\nboard = nucleo_h723zg\nframework = mbed\nbuild_flags = -DUSBDEVICE\nmonitor_speed = 115200\n"})}),"\n",(0,i.jsx)(n.h3,{id:"mbed_appjson",children:"mbed_app.json"}),"\n",(0,i.jsx)(n.p,{children:"This file adds extra features to Mbed OS:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "target_overrides": {\n    "*": {\n      "platform.stdio-baud-rate": 115200,\n      "target.usb_device": true,\n      "target.printf_lib": "minimal-printf",\n      "platform.minimal-printf-enable-floating-point": true,\n      "platform.minimal-printf-set-floating-point-max-decimals": 2\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"building-and-running",children:"Building and Running"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Mbed OS"}),"\n",(0,i.jsx)(n.li,{children:"Nucleo-H723ZG (or compatible) board"}),"\n",(0,i.jsx)(n.li,{children:"Appropriate CAN transceivers and wiring for actuators and sensors"}),"\n",(0,i.jsxs)(n.li,{children:["Configuration parameters set in ",(0,i.jsx)(n.strong,{children:"config.hpp"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Building:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use PlatformIO in VS Code as described above"}),"\n",(0,i.jsxs)(n.li,{children:["Adjust configuration parameters in ",(0,i.jsx)(n.strong,{children:"config.hpp"})," as necessary"]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"platformio.ini"})," file configures the build process"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Deployment:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Flash the binary onto the target board"}),"\n",(0,i.jsx)(n.li,{children:"Connect the USB device port to the onboard computer"}),"\n",(0,i.jsx)(n.li,{children:"The attached LED will indicate the current state"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.h3,{id:"serial-control-testing",children:"Serial Control Testing"}),"\n",(0,i.jsxs)(n.p,{children:["The project includes a Python script (",(0,i.jsx)(n.code,{children:"serial_test.py"}),") for testing serial control:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Connect the Serial-to-USB adapter to the breakout board's Serial port (not directly to the Nucleo)"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Run the script with the appropriate port:"}),"\n",(0,i.jsx)(n.p,{children:"python serial_test.py --port /dev/ttyUSB0 --speed 5.0"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The script provides various command-line options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--port"}),": Serial port (default: ",(0,i.jsx)(n.code,{children:"/dev/ttyUSB0"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--speed"}),": Target speed in m/s (default: ",(0,i.jsx)(n.code,{children:"5.0"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--duration"}),": Test duration in seconds (default: ",(0,i.jsx)(n.code,{children:"0"})," for indefinite)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--debug"}),": Enable debug logging"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"future-work",children:"Future Work"}),"\n",(0,i.jsx)(n.p,{children:"The following improvements are recommended for future development:"}),"\n",(0,i.jsx)(n.h3,{id:"critical-issues",children:"Critical Issues"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Safety Issue:"})," Very rarely, when the controller dies, the system doesn't stop. This is a critical safety issue that needs to be addressed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Controller Reliability:"})," Fix controller noise and disconnection issues that occur occasionally."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"USB Passthrough:"})," Fix USB passthrough breaking when the onboard computer isn't actively awaiting input."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"vehicle-performance",children:"Vehicle Performance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PID Steering Control:"})," Implement PID control for steering to improve accuracy and response."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Brake Improvements:"})," Develop a pressure sensor feedback loop to set brake pressure more accurately."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ABS Implementation:"})," Integrate an accelerometer to implement anti-lock braking capabilities."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"code-structure",children:"Code Structure"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Smart Pointers:"})," Replace raw pointers with smart pointers for better memory management."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Application Structure:"})," Refactor the system to follow a cleaner system lifecycle pattern:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"system->start()\nsystem->run()\nsystem->stop()\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Thread-safe Logging:"})," Make the logging system thread-safe to prevent race conditions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Profiler Enhancement:"})," Implement or fix the profiling system, which is currently untested."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By addressing these issues, the Gokart Controller will become more reliable, safer, and easier to maintain for future users."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var s=r(6540);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);